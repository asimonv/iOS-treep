// Generated by Apple Swift version 3.0.1 (swiftlang-800.0.58.6 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIColor;
enum ScrollableGraphViewLineStyle : NSInteger;
enum ScrollableGraphViewFillType : NSInteger;
enum ScrollableGraphViewGradientType : NSInteger;
enum ScrollableGraphViewDirection : NSInteger;
enum ScrollableGraphViewDataPointType : NSInteger;
@class UIBezierPath;
enum ScrollableGraphViewAnimationType : NSInteger;
enum ScrollableGraphViewReferenceLinePosition : NSInteger;
enum ScrollableGraphViewReferenceLineType : NSInteger;
@class UIFont;
@class NSCoder;

SWIFT_CLASS("_TtC19ScrollableGraphView19ScrollableGraphView")
@interface ScrollableGraphView : UIScrollView <UIScrollViewDelegate>
/**
  Specifies how thick the graph of the line is. In points.
*/
@property (nonatomic) CGFloat lineWidth;
@property (nonatomic, strong) UIColor * _Nonnull lineColor;
/**
  Whether or not the line should be rendered using bezier curves are straight lines.
*/
@property (nonatomic) enum ScrollableGraphViewLineStyle lineStyle;
/**
  How each segment in the line should connect. Takes any of the Core Animation LineJoin values.
*/
@property (nonatomic, copy) NSString * _Nonnull lineJoin;
/**
  The line caps. Takes any of the Core Animation LineCap values.
*/
@property (nonatomic, copy) NSString * _Nonnull lineCap;
@property (nonatomic) CGFloat lineCurviness;
/**
  Whether bars should be drawn or not. If you want a bar graph, this should be set to true.
*/
@property (nonatomic) BOOL shouldDrawBarLayer;
/**
  The width of an individual bar on the graph.
*/
@property (nonatomic) CGFloat barWidth;
/**
  The actual colour of the bar.
*/
@property (nonatomic, strong) UIColor * _Nonnull barColor;
/**
  The width of the outline of the bar
*/
@property (nonatomic) CGFloat barLineWidth;
/**
  The colour of the bar outline
*/
@property (nonatomic, strong) UIColor * _Nonnull barLineColor;
/**
  Whether the bars should be drawn with rounded corners
*/
@property (nonatomic) BOOL shouldRoundBarCorners;
/**
  The background colour for the entire graph view, not just the plotted graph.
*/
@property (nonatomic, strong) UIColor * _Nonnull backgroundFillColor;
/**
  Specifies whether or not the plotted graph should be filled with a colour or gradient.
*/
@property (nonatomic) BOOL shouldFill;
/**
  Specifies whether to fill the graph with a solid colour or gradient.
*/
@property (nonatomic) enum ScrollableGraphViewFillType fillType;
/**
  If fillType is set to .Solid then this colour will be used to fill the graph.
*/
@property (nonatomic, strong) UIColor * _Nonnull fillColor;
/**
  If fillType is set to .Gradient then this will be the starting colour for the gradient.
*/
@property (nonatomic, strong) UIColor * _Nonnull fillGradientStartColor;
/**
  If fillType is set to .Gradient, then this will be the ending colour for the gradient.
*/
@property (nonatomic, strong) UIColor * _Nonnull fillGradientEndColor;
/**
  If fillType is set to .Gradient, then this defines whether the gradient is rendered as a linear gradient or radial gradient.
*/
@property (nonatomic) enum ScrollableGraphViewGradientType fillGradientType;
/**
  How far the “maximum” reference line is from the top of the view’s frame. In points.
*/
@property (nonatomic) CGFloat topMargin;
/**
  How far the “minimum” reference line is from the bottom of the view’s frame. In points.
*/
@property (nonatomic) CGFloat bottomMargin;
/**
  How far the first point on the graph should be placed from the left hand side of the view.
*/
@property (nonatomic) CGFloat leftmostPointPadding;
/**
  How far the final point on the graph should be placed from the right hand side of the view.
*/
@property (nonatomic) CGFloat rightmostPointPadding;
/**
  How much space should be between each data point.
*/
@property (nonatomic) CGFloat dataPointSpacing;
/**
  Which side of the graph the user is expected to scroll from.
*/
@property (nonatomic) enum ScrollableGraphViewDirection direction;
/**
  If this is set to true, then the range will automatically be detected from the data the graph is given.
*/
@property (nonatomic) BOOL shouldAutomaticallyDetectRange;
/**
  Forces the graph’s minimum to always be zero. Used in conjunction with shouldAutomaticallyDetectRange or shouldAdaptRange, if you want to force the minimum to stay at 0 rather than the detected minimum.
*/
@property (nonatomic) BOOL shouldRangeAlwaysStartAtZero;
/**
  The minimum value for the y-axis. This is ignored when shouldAutomaticallyDetectRange or shouldAdaptRange = true
*/
@property (nonatomic) double rangeMin;
/**
  The maximum value for the y-axis. This is ignored when shouldAutomaticallyDetectRange or shouldAdaptRange = true
*/
@property (nonatomic) double rangeMax;
/**
  Whether or not to draw a symbol for each data point.
*/
@property (nonatomic) BOOL shouldDrawDataPoint;
/**
  The shape to draw for each data point.
*/
@property (nonatomic) enum ScrollableGraphViewDataPointType dataPointType;
/**
  The size of the shape to draw for each data point.
*/
@property (nonatomic) CGFloat dataPointSize;
/**
  The colour with which to fill the shape.
*/
@property (nonatomic, strong) UIColor * _Nonnull dataPointFillColor;
/**
  If dataPointType is set to .Custom then you,can provide a closure to create any kind of shape you would like to be displayed instead of just a circle or square. The closure takes a CGPoint which is the centre of the shape and it should return a complete UIBezierPath.
*/
@property (nonatomic, copy) UIBezierPath * _Nonnull (^ _Nullable customDataPointPath)(CGPoint);
/**
  Whether or not the y-axis’ range should adapt to the points that are visible on screen. This means if there are only 5 points visible on screen at any given time, the maximum on the y-axis will be the maximum of those 5 points. This is updated automatically as the user scrolls along the graph.
*/
@property (nonatomic) BOOL shouldAdaptRange;
/**
  If shouldAdaptRange is set to true then this specifies whether or not the points on the graph should animate to their new positions. Default is set to true.
*/
@property (nonatomic) BOOL shouldAnimateOnAdapt;
/**
  How long the animation should take. Affects both the startup animation and the animation when the range of the y-axis adapts to onscreen points.
*/
@property (nonatomic) double animationDuration;
/**
  The animation style.
*/
@property (nonatomic) enum ScrollableGraphViewAnimationType adaptAnimationType;
/**
  If adaptAnimationType is set to .Custom, then this is the easing function you would like applied for the animation.
*/
@property (nonatomic, copy) double (^ _Nullable customAnimationEasingFunction)(double);
/**
  Whether or not the graph should animate to their positions when the graph is first displayed.
*/
@property (nonatomic) BOOL shouldAnimateOnStartup;
/**
  Whether or not to show the y-axis reference lines and labels.
*/
@property (nonatomic) BOOL shouldShowReferenceLines;
/**
  The colour for the reference lines.
*/
@property (nonatomic, strong) UIColor * _Nonnull referenceLineColor;
/**
  The thickness of the reference lines.
*/
@property (nonatomic) CGFloat referenceLineThickness;
/**
  Where the labels should be displayed on the reference lines.
*/
@property (nonatomic) enum ScrollableGraphViewReferenceLinePosition referenceLinePosition;
/**
  The type of reference lines. Currently only .Cover is available.
*/
@property (nonatomic) enum ScrollableGraphViewReferenceLineType referenceLineType;
/**
  How many reference lines should be between the minimum and maximum reference lines. If you want a total of 4 reference lines, you would set this to 2. This can be set to 0 for no intermediate reference lines.This can be used to create reference lines at specific intervals. If the desired result is to have a reference line at every 10 units on the y-axis, you could, for example, set rangeMax to 100, rangeMin to 0 and numberOfIntermediateReferenceLines to 9.
*/
@property (nonatomic) NSInteger numberOfIntermediateReferenceLines;
/**
  Whether or not to add labels to the intermediate reference lines.
*/
@property (nonatomic) BOOL shouldAddLabelsToIntermediateReferenceLines;
/**
  Whether or not to add units specified by the referenceLineUnits variable to the labels on the intermediate reference lines.
*/
@property (nonatomic) BOOL shouldAddUnitsToIntermediateReferenceLineLabels;
/**
  The font to be used for the reference line labels.
*/
@property (nonatomic, strong) UIFont * _Nonnull referenceLineLabelFont;
/**
  The colour of the reference line labels.
*/
@property (nonatomic, strong) UIColor * _Nonnull referenceLineLabelColor;
/**
  Whether or not to show the units on the reference lines.
*/
@property (nonatomic) BOOL shouldShowReferenceLineUnits;
/**
  The units that the y-axis is in. This string is used for labels on the reference lines.
*/
@property (nonatomic, copy) NSString * _Nullable referenceLineUnits;
/**
  The number of decimal places that should be shown on the reference line labels.
*/
@property (nonatomic) NSInteger referenceLineNumberOfDecimalPlaces;
/**
  The NSNumberFormatterStyle that reference lines should use to display
*/
@property (nonatomic) NSNumberFormatterStyle referenceLineNumberStyle;
/**
  Whether or not to show the labels on the x-axis for each point.
*/
@property (nonatomic) BOOL shouldShowLabels;
/**
  How far from the “minimum” reference line the data point labels should be rendered.
*/
@property (nonatomic) CGFloat dataPointLabelTopMargin;
/**
  How far from the bottom of the view the data point labels should be rendered.
*/
@property (nonatomic) CGFloat dataPointLabelBottomMargin;
/**
  The font for the data point labels.
*/
@property (nonatomic, strong) UIColor * _Nonnull dataPointLabelColor;
/**
  The colour for the data point labels.
*/
@property (nonatomic, strong) UIFont * _Nullable dataPointLabelFont;
/**
  Used to force the graph to show every n-th dataPoint label
*/
@property (nonatomic) NSInteger dataPointLabelsSparsity;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
- (void)layoutSubviews;
- (void)setWithData:(NSArray<NSNumber *> * _Nonnull)data withLabels:(NSArray<NSString *> * _Nonnull)labels;
@end

typedef SWIFT_ENUM(NSInteger, ScrollableGraphViewAnimationType) {
  ScrollableGraphViewAnimationTypeEaseOut = 0,
  ScrollableGraphViewAnimationTypeElastic = 1,
  ScrollableGraphViewAnimationTypeCustom = 2,
};

typedef SWIFT_ENUM(NSInteger, ScrollableGraphViewDataPointType) {
  ScrollableGraphViewDataPointTypeCircle = 0,
  ScrollableGraphViewDataPointTypeSquare = 1,
  ScrollableGraphViewDataPointTypeCustom = 2,
};

typedef SWIFT_ENUM(NSInteger, ScrollableGraphViewDirection) {
  ScrollableGraphViewDirectionLeftToRight = 0,
  ScrollableGraphViewDirectionRightToLeft = 1,
};

typedef SWIFT_ENUM(NSInteger, ScrollableGraphViewFillType) {
  ScrollableGraphViewFillTypeSolid = 0,
  ScrollableGraphViewFillTypeGradient = 1,
};

typedef SWIFT_ENUM(NSInteger, ScrollableGraphViewGradientType) {
  ScrollableGraphViewGradientTypeLinear = 0,
  ScrollableGraphViewGradientTypeRadial = 1,
};

typedef SWIFT_ENUM(NSInteger, ScrollableGraphViewLineStyle) {
  ScrollableGraphViewLineStyleStraight = 0,
  ScrollableGraphViewLineStyleSmooth = 1,
};

typedef SWIFT_ENUM(NSInteger, ScrollableGraphViewReferenceLinePosition) {
  ScrollableGraphViewReferenceLinePositionLeft = 0,
  ScrollableGraphViewReferenceLinePositionRight = 1,
  ScrollableGraphViewReferenceLinePositionBoth = 2,
};

typedef SWIFT_ENUM(NSInteger, ScrollableGraphViewReferenceLineType) {
  ScrollableGraphViewReferenceLineTypeCover = 0,
};

#pragma clang diagnostic pop
